@page "/sales"

@using Telerik.DataSource

@inject ISaleService SaleService
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

<PageTitle>Sales</PageTitle>

<h1>Sales</h1>

<Loader isLoaded="@isLoaded" />

<TelerikGrid Class="grid"
			 Data=@GridData
			 OnUpdate="@UpdateHandler"
			 OnDelete="@DeleteHandler"
			 OnCreate="@CreateHandler"
			 ConfirmDelete="true"
			 Pageable="true"
			 Sortable="true"
			 FilterMode="GridFilterMode.FilterMenu"
			 Resizable="true"
			 Reorderable="true"
			 EditMode="GridEditMode.Popup"
			 PageSize="10"
			 Navigable="true">

	<GridToolBarTemplate>
		<GridCommandButton Command="Add" Icon="@FontIcon.Plus" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Add New Sale</GridCommandButton>
	</GridToolBarTemplate>
	<GridSettings>
		<GridPopupEditFormSettings Orientation="FormOrientation.Horizontal"></GridPopupEditFormSettings>
	</GridSettings>

	<GridColumns>
		<GridColumn Field="Customer" Title="Customer" Width="180px">
			<Template>
				@{
					var sale = context as Sale;
					var customerName = CustomerList.FirstOrDefault(g => g.CustomerId == sale!.CustomerId)?.Name;
					@customerName
					;
				}
			</Template>
			<EditorTemplate>
				@{
					var sale = context as Sale;
					<TelerikDropDownList Data="@CustomerList"
									 	@bind-Value="@sale!.CustomerId"
									 DefaultText="Choose Customer"
									 TextField="Name"
									 ValueField="CustomerId">
					</TelerikDropDownList>
				}
			</EditorTemplate>
		</GridColumn>
		<GridColumn Field="SaleDate" Title="Sale Date" DisplayFormat="{0:yyyy-MM-dd}" Width="140px" />

		<GridCommandColumn Width="200px">
			<GridCommandButton Command="ViewDetail" Icon="@FontIcon.ArrowRight" ShowInEdit="false" OnClick="@ViewDetailHandler">View</GridCommandButton>
			<GridCommandButton Command="Edit" Icon="@FontIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary">Edit</GridCommandButton>
			<GridCommandButton Command="Delete" Icon="@FontIcon.Trash" ThemeColor="@ThemeConstants.Button.ThemeColor.Error">Delete</GridCommandButton>
		</GridCommandColumn>
	</GridColumns>

</TelerikGrid>


@code {
	private bool isLoaded = false;

	public List<Sale> GridData { get; set; } = new List<Sale>();
	public List<Customer> CustomerList { get; set; } = new List<Customer>();

	[CascadingParameter]
	protected Notification? Notification { get; set; }

	void ShowNotifications(string Text, string ThemeColor)
	{
		Notification!.telerikNotification.Show(new NotificationModel
			{
				Text = Text,
				ThemeColor = ThemeColor,
			});
		isLoaded = true;
	}

	private async Task LoadData()
	{
		await SaleService.GetSales();
		GridData = SaleService.Sales;
		await CustomerService.GetCustomers();
		CustomerList = CustomerService.Customers;
		isLoaded = true;
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	public async Task CreateHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var sale = (Sale)args.Item;
		try
		{
			await SaleService.CreateSale(sale);
			await LoadData();
			ShowNotifications("Sale created successfully!!", "success");
		}
		catch (Exception)
		{
			ShowNotifications("Sale not created!!", "error");
		}

	}

	public async Task UpdateHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var sale = (Sale)args.Item;
		try
		{
			await SaleService.UpdateSale(sale, sale.SaleId);
			await LoadData();
			ShowNotifications("Sale updated successfully!!", "success");
		}
		catch (Exception)
		{
			ShowNotifications("Sale not updated!!", "error");
		}
	}

	public async Task DeleteHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var sale = (Sale)args.Item;
		try
		{
			await SaleService.DeleteSale(sale.SaleId);
			await LoadData();
			ShowNotifications("Sale deleted successfully!!", "success");
		}
		catch (Exception)
		{
			ShowNotifications("Sale not deleted!!", "error");
		}
	}

	public void ViewDetailHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var sale = (Sale)args.Item;
		NavigationManager.NavigateTo($"/saledetails/{sale.SaleId}");
	}
}

<style>
	.width-100 {
		width: 100%;
	}

	.grid .k-grid-content tr {
		line-height: 32px;
	}
</style>