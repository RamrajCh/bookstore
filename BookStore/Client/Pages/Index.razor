@page "/"
@page "/books"

@using System.Globalization;
@using Telerik.DataSource

@inject IBookService BookService
@inject IGenreService GenreService

<PageTitle>Books</PageTitle>

<h1>Books</h1>

<Loader isLoaded="@isLoaded" />

<TelerikGrid Class="grid"
			 Data=@GridData
			 OnUpdate="@UpdateHandler"
			 OnDelete="@DeleteHandler"
			 OnCreate="@CreateHandler"
			 ConfirmDelete="true"
			 Pageable="true"
			 Sortable="true"
			 FilterMode="GridFilterMode.FilterMenu"
			 Resizable="true"
			 Reorderable="true"
			 EditMode="GridEditMode.Popup"
			 PageSize="10"
			 Navigable="true">

	<GridToolBarTemplate>
		<GridCommandButton Command="Add" Icon="@FontIcon.Plus" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Add New Book</GridCommandButton>
	</GridToolBarTemplate>
	<GridSettings>
		<GridPopupEditFormSettings Orientation="FormOrientation.Horizontal"></GridPopupEditFormSettings>
	</GridSettings>

	<GridColumns>
		<GridColumn Field="Title" Title="Book Title" Width="180px" />
		<GridColumn Field="Author" Title="Author" Width="180px" />
		<GridColumn Field="ISBN" Title="ISBN number" Width="180px" />
		<GridColumn Field="Genre" Title="Genre" Width="140px" >
			<Template>
				@{
					var book = context as Book;
					var genreName = GenreList.FirstOrDefault(g => g.GenreId == book!.GenreId)?.Name;
					@genreName;
				}
			</Template>
			<EditorTemplate>
				@{
					var book = context as Book;
					<TelerikDropDownList Data="@GenreList"
									 	@bind-Value="@book!.GenreId"
									 DefaultText="Choose Genre"
									 TextField="Name"
									 ValueField="GenreId">
					</TelerikDropDownList>
				}
			</EditorTemplate>
		</GridColumn>
		<GridColumn Field="PublishedYear" Title="Published Date" DisplayFormat="{0:yyyy-MM-dd}" Width="140px" />
		<GridColumn Field="Price" Title="Price" TextAlign="@ColumnTextAlign.Right" Width="110px" >
			<Template>
				@{
					var book = context as Book;
					@book!.Price.ToString("C2", new CultureInfo("en-NP"));
				}
			</Template>
		</GridColumn>
		<GridColumn Field="Stock" Title="Stock" Width="150px">
			<Template>
                @{
                    var product = context as Book;
                    var value = product!.Stock;
                }
                <TelerikProgressBar Class="width-80" Max="10" Value="(double)value">
                    <ProgressBarLabel Visible="true" Position="@ProgressBarLabelPosition.Center">
                        <Template Context="progressBarContext">
                            @if (value == 0)
							{
								<span style="font-weight:bold">Out of Stock</span>
							}
                            else
                            {
                                <span>In stock:<span style="font-weight:bold">@(progressBarContext.Value)</span></span>
                            }
                        </Template>
                    </ProgressBarLabel>
                </TelerikProgressBar>
            </Template>
		</GridColumn>

		<GridCommandColumn Width="180px">
			<GridCommandButton Command="Edit" Icon="@FontIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary">Edit</GridCommandButton>
			<GridCommandButton Command="Delete" Icon="@FontIcon.Trash" ThemeColor="@ThemeConstants.Button.ThemeColor.Error">Delete</GridCommandButton>
		</GridCommandColumn>
	</GridColumns>

</TelerikGrid>


@code {
	private bool isLoaded = false;

	public List<Book> GridData { get; set; } = new List<Book>();
	public List<Genre> GenreList { get; set; } = new List<Genre>();

	private async Task LoadData()
	{
		await BookService.GetBooks();
		GridData = BookService.Books;
		await GenreService.GetGenres();
		GenreList = GenreService.Genres;
		isLoaded = true;
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	public async Task CreateHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var book = (Book)args.Item;
		await BookService.CreateBook(book);
		await LoadData();

	}

	public async Task UpdateHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var book = (Book)args.Item;
		await BookService.UpdateBook(book, book.BookId);
		await LoadData();
	}

	public async Task DeleteHandler(GridCommandEventArgs args)
	{
		isLoaded = false;
		var book = (Book)args.Item;
		await BookService.DeleteBook(book.BookId);
		await LoadData();
	}
}

<style>
	.width-100 {
		width: 100%;
	}

	.grid .k-grid-content tr {
		line-height: 32px;
	}
</style>