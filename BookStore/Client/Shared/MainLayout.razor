@layout TelerikLayout
@inherits LayoutComponentBase

<div class="drawer-container">
    <div class="custom-toolbar">
        <span style="font-weight: bold; font-size: 25px;">Book Store</span>
    </div>
    <TelerikDrawer @ref="Drawer" Data="Data" Mode="@DrawerMode.Push" Expanded="true" @bind-SelectedItem="SelectedItem">
        <DrawerContent>
            <TelerikNotification @ref="@Notification.telerikNotification"
                                 HorizontalPosition="@NotificationHorizontalPosition.Center"
                                 VerticalPosition="@NotificationVerticalPosition.Top"
                                 Class="big-notification">
            </TelerikNotification>
            <CascadingValue IsFixed="true" Value="@Notification">
                <div class="page">
                    @Body
                </div>
            </CascadingValue>
            
        </DrawerContent>
    </TelerikDrawer>
</div>

@code {
    Notification Notification { get; set; } = new Notification();

    public TelerikDrawer<DrawerItem> Drawer { get; set; } = new TelerikDrawer<DrawerItem>();
    public DrawerItem? SelectedItem { get; set; }
    public IEnumerable<DrawerItem> Data { get; set; } =
        new List<DrawerItem>
            {
            new DrawerItem
            {
                Text = "Index",
                Icon = FontIcon.Home,
                Url = "/"
            },
            new DrawerItem { Separator = true},
            new DrawerItem
            {
                Text = "Genres",
                Icon = FontIcon.Categorize,
                Url = "/genres"
            },
            new DrawerItem
            {
                Text = "Books",
                Icon = FontIcon.Book,
                Url="/books"
            },
            new DrawerItem { Separator = true},
            new DrawerItem
            {
                Text = "Customers",
                Icon = FontIcon.User,
                Url="/customers"
            },
            new DrawerItem { Separator = true},
            new DrawerItem
            {
                Text = "Sales",
                Icon = FontIcon.Dollar,
                Url="/sales"
            },
            new DrawerItem
            {
                Text = "Sales Items",
                Icon = FontIcon.Categorize,
                Url="/salesitems"
            }
                };

    protected override Task OnInitializedAsync()
    {
        SelectedItem = Data.ToList()[0];

        return base.OnInitializedAsync();
    }

    public class DrawerItem
    {
        public string? Text { get; set; }

        public FontIcon? Icon { get; set; }

        public string? Url { get; set; }

        public bool Separator { get; set; }
    }
}

<style>

    .k-drawer-container {
        position: relative;
        width: 100%;
    }

    .k-icon {
        font-size: 20px;
    }

    .custom-toolbar {
        width: 100%;
        background-color: #f6f6f6;
        line-height: 10px;
        border-bottom: inset;
        border-bottom-width: 1px;
        padding: 15px;
        color: #656565;
    }

    .page{
        padding: 10px;
    }

    .big-notification .k-notification-container .k-notification-wrap {
        width: 350px;
        height: 100px;
    }

    .big-notification {
        z-index: 1234;
    }
</style>

